{"version":3,"file":"static/webpack/static\\development\\pages\\b.js.a791311572c5c7b2604d.hot-update.js","sources":["webpack:///./pages/b.js"],"sourcesContent":["import React,{useState,useReducer,useEffect} from 'react'\r\n\r\nclass MyCount extends React.Component{\r\n  state={\r\n    count:0\r\n  }\r\n\r\n  componentDidMount(){\r\n    //状态更新\r\n    this.interval=setInterval(() => {\r\n      this.setState({count:this.state.count+1})\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    //定时器在组件卸载后需要清除 避免定时器内使用的变量不被释放报错\r\n    if(this.interval){\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <span>{this.state.count}</span>\r\n  }\r\n}\r\nfunction countReducer(state,action){\r\n   switch (action,type) {\r\n     case 'add':\r\n       return state+1\r\n     case 'minus':\r\n       return state-1\r\n     default:\r\n       return state\r\n   }\r\n}\r\n//函数组件\r\nfunction MyCountFunc() {\r\n  // const [count,setCount]=useState(0)  //[a,b]\r\n  const [count,dispatchCount]=useReducer(countReducer,0)\r\n  // setCount(1) //不基于新的count值\r\n  // setCount(c=>c+1) //基于新的count值\r\n\r\n  //组件渲染完成后会执行useEffect\r\n  useEffect(()=>{\r\n  //状态更新\r\n    const interval=setInterval(() => {\r\n      // setCount(c=>c+1)\r\n      dispatchCount({type:'add'})\r\n    }, 1000);\r\n    return ()=>clearInterval(interval)\r\n  },[])\r\n    return <span>{count}</span>\r\n}\r\n\r\nexport default MyCountFunc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;;;;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;AArBA;AACA;AAsBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}