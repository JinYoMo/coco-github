{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n//创建store\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nvar userInitialState = {};\n\nfunction userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : userInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n\nvar allReducers = combineReducers({\n  user: userReducer\n}); // // console.log(store.getState())  //获取到state\n// // store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\n// store.dispatch(add(3))\n// store.dispatch(addAsync(3))\n// // console.log(store.getState())  //获取新的state\n// //subscribe该方法每次数据变更均会调用(后面)\n// store.subscribe(()=>{\n//   console.log('change',store.getState());\n// })\n// store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\n// store.dispatch({type:UPDATE_USERNAME,name:'Lilei'})\n\nexport default function initializeStore(state) {\n  var store = createStore(allReducers, _Object$assign({}, {\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)) //applyMiddleware用于异步的中间件\n  );\n  return store; //确保每次生成的store都是新的\n}","map":{"version":3,"sources":["E:/个人项目/gitHub项目/coco-github/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","userInitialState","userReducer","state","action","type","allReducers","user","initializeStore","store"],"mappings":";AAAA;AACA,SAAQA,WAAR,EAAoBC,eAApB,EAAoCC,eAApC,QAA0D,OAA1D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AAEA,IAAMC,gBAAgB,GAAC,EAAvB;;AAEA,SAASC,WAAT,GAAmD;AAAA,MAA9BC,KAA8B,uEAAxBF,gBAAwB;AAAA,MAAPG,MAAO;;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE;AACE,aAAOF,KAAP;AAFJ;AAID;;AACD,IAAMG,WAAW,GAACT,eAAe,CAAC;AAChCU,EAAAA,IAAI,EAACL;AAD2B,CAAD,CAAjC,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASM,eAAT,CAAyBL,KAAzB,EAA+B;AAC5C,MAAMM,KAAK,GAACb,WAAW,CACrBU,WADqB,EAErB,eAAc,EAAd,EAAkB;AAChBC,IAAAA,IAAI,EAACN;AADW,GAAlB,EAEEE,KAFF,CAFqB,EAKrBH,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CALE,CAK6B;AAL7B,GAAvB;AAOA,SAAOU,KAAP,CAR4C,CAQ7B;AAChB","sourcesContent":["//创建store\r\nimport {createStore,combineReducers,applyMiddleware} from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n\r\nconst userInitialState={}\r\n\r\nfunction userReducer(state=userInitialState,action){\r\n  switch (action.type){\r\n    default:\r\n      return state\r\n  }\r\n}\r\nconst allReducers=combineReducers({\r\n  user:userReducer\r\n})\r\n\r\n// // console.log(store.getState())  //获取到state\r\n// // store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\r\n// store.dispatch(add(3))\r\n// store.dispatch(addAsync(3))\r\n// // console.log(store.getState())  //获取新的state\r\n// //subscribe该方法每次数据变更均会调用(后面)\r\n// store.subscribe(()=>{\r\n//   console.log('change',store.getState());\r\n// })\r\n// store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\r\n// store.dispatch({type:UPDATE_USERNAME,name:'Lilei'})\r\n\r\nexport default function initializeStore(state){\r\n  const store=createStore(\r\n    allReducers,\r\n    Object.assign({}, {\r\n      user:userInitialState\r\n    },state),\r\n    composeWithDevTools(applyMiddleware(ReduxThunk))  //applyMiddleware用于异步的中间件\r\n  )\r\n  return store;  //确保每次生成的store都是新的\r\n}"]},"metadata":{},"sourceType":"module"}