{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Tabs from \"antd/lib/tabs\";\nimport _Icon from \"antd/lib/icon\";\nimport _Button from \"antd/lib/button\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nimport { useEffect } from 'react';\nimport getConfig from 'next/config';\nimport { connect } from 'react-redux';\nimport Router, { withRouter } from 'next/router';\nimport LRU from 'lru-cache';\nimport Repo from '../components/Repo';\nimport { cacheArray } from '../lib/repo-basic-cache';\n\nvar api = require('../lib/api');\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar cachedUserRepos, cachedUserStaredRepos;\nvar isServer = typeof window === 'undefined'; //注意缓存在客户端和服务端公用的情况，引入isServer判断 并且设置了时效\n// const cache=new LRU({\n//   maxAge:1000*60*10  //最长10min不去使用缓存数据就清空\n// })\n\nfunction Index(_ref) {\n  var userRepos = _ref.userRepos,\n      userStaredRepos = _ref.userStaredRepos,\n      user = _ref.user,\n      router = _ref.router;\n  console.log(userRepos, userStaredRepos, user, router);\n  var tabKey = router.query.key || '1';\n\n  var handleTabChange = function handleTabChange(activeKey) {\n    Router.push(\"/?key=\".concat(activeKey));\n  }; //第一次进来发现有数据就会被缓存\n\n\n  useEffect(function () {\n    if (!isServer) {\n      cachedUserRepos = userRepos;\n      cachedUserStaredRepos = userStaredRepos; // //不是服务端的情况下，对数据进行缓存，方便再次进入不需要调接口\n      // if(userRepos){\n      //   cache.set('userRepos',userRepos)\n      // }\n      // if(userStaredRepos){\n      //   cache.set('userStaredRepos',userStaredRepos)\n      // }\n\n      var timeout = setTimeout(function () {\n        cachedUserRepos = null;\n        cachedUserStaredRepos = null;\n      }, 1000 * 60 * 10); //10min必须清空策略\n    }\n  }, [userRepos, userStaredRepos]); //监听参数发生变化则会调用\n  //每次调用存储数据\n\n  useEffect(function () {\n    //客户端情况下保存\n    if (!isServer && user && user.id) {\n      cacheArray(userRepos);\n      cacheArray(userStaredRepos);\n    }\n  });\n\n  if (!user || !user.id) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jsx-3888340167\" + \" \" + \"root\"\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"jsx-3888340167\"\n    }, \"\\u4EB2\\uFF0C\\u60A8\\u8FD8\\u6CA1\\u6709\\u767B\\u5F55\\u54E6~\"), /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      href: publicRuntimeConfig.OAUTH_URL\n    }, \"\\u70B9\\u51FB\\u767B\\u5F55\"), /*#__PURE__*/React.createElement(_JSXStyle, {\n      id: \"3888340167\"\n    }, [\".root.jsx-3888340167{height:400px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\"]));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jsx-2910819430\" + \" \" + \"root\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jsx-2910819430\" + \" \" + \"user-info\"\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: user.avatar_url,\n    alt: \"user avatar\",\n    className: \"jsx-2910819430\" + \" \" + \"avatar\"\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jsx-2910819430\" + \" \" + \"login\"\n  }, user.login), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jsx-2910819430\" + \" \" + \"name\"\n  }, user.name), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"jsx-2910819430\" + \" \" + \"bio\"\n  }, user.bio), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"jsx-2910819430\" + \" \" + \"email\"\n  }, /*#__PURE__*/React.createElement(_Icon, {\n    type: \"mail\",\n    style: {\n      marginRight: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    href: user.html_url,\n    target: \"_black\",\n    className: \"jsx-2910819430\"\n  }, user.html_url))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jsx-2910819430\" + \" \" + \"user-repos\"\n  }, /*#__PURE__*/React.createElement(_Tabs, {\n    activeKey: tabKey,\n    onChange: handleTabChange,\n    animated: false\n  }, /*#__PURE__*/React.createElement(_Tabs.TabPane, {\n    tab: \"\\u4F60\\u7684\\u4ED3\\u5E93\",\n    key: \"1\"\n  }, userRepos.map(function (repo) {\n    return /*#__PURE__*/React.createElement(Repo, {\n      key: repo.id,\n      repo: repo\n    });\n  })), /*#__PURE__*/React.createElement(_Tabs.TabPane, {\n    tab: \"\\u4F60\\u5173\\u6CE8\\u7684\\u4ED3\\u5E93\",\n    key: \"2\"\n  }, userStaredRepos.map(function (repo) {\n    return /*#__PURE__*/React.createElement(Repo, {\n      key: repo.id,\n      repo: repo\n    });\n  })))), /*#__PURE__*/React.createElement(_JSXStyle, {\n    id: \"2910819430\"\n  }, [\".root.jsx-2910819430{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;padding:20px 0;}\", \".user-info.jsx-2910819430{width:200px;margin-right:40px;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}\", \".login.jsx-2910819430{font-weight:800;font-size:20px;margin-top:20px;}\", \".name.jsx-2910819430{font-size:16px;color:#777;}\", \".bio.jsx-2910819430{margin-top:20px;color:#333;}\", \".avatar.jsx-2910819430{width:100%;border-radius:5px;}\", \".user-repos.jsx-2910819430{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}\"]));\n} //服务端和客户端都会执行\n\n/**\r\n * 客户端切换与访问Index页面服务端渲染都会执行getInitialProps\r\n * 在服务端渲染的时候，运行环境是处于nodejs环境，而不是处于浏览器的环境\r\n * 在nodejs环境中axios.get('/github/search/repositories?q=react')方式请求，会请求'http://localhost:80/github/search/repositories?q=react'地址，这个地址明显请求不成功\r\n * 解决的方式是请求api时判断是否为服务端，提取出公共的lib/api.js\r\n * 客户端的请求会到server/api.js中做处理，返回给客户端\r\n * 以上就是同构的概念——就是有部分代码都可能会在客户端和服务端执行，因此这段代码就要适应浏览器的执行环境，也要适应nodejs的执行环境，因此做区分处理，最终汇集到一个点requestGithub上面，保证在客户端和服务端都可正常执行\r\n */\n\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var ctx, reduxStore, user, userRepos, userStaredRepos;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref2.ctx, reduxStore = _ref2.reduxStore;\n            //  const result=await axios\n            //  .get('/github/search/repositories?q=react')\n            //  .then(resp=>console.log(resp))\n            user = reduxStore.getState().user; //拿到用户信息\n\n            if (!(!user || !user.id)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              isLogin: false\n            });\n\n          case 4:\n            if (isServer) {\n              _context.next = 7;\n              break;\n            }\n\n            if (!(cachedUserRepos && cachedUserStaredRepos)) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              userRepos: cachedUserRepos,\n              userStaredRepos: cachedUserStaredRepos\n            });\n\n          case 7:\n            _context.next = 9;\n            return api.request({\n              url: '/user/repos'\n            }, ctx.req, ctx.res);\n\n          case 9:\n            userRepos = _context.sent;\n            _context.next = 12;\n            return api.request({\n              url: '/user/starred'\n            }, ctx.req, ctx.res);\n\n          case 12:\n            userStaredRepos = _context.sent;\n            return _context.abrupt(\"return\", {\n              isLogin: true,\n              userRepos: userRepos.data,\n              userStaredRepos: userStaredRepos.data\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default withRouter(connect(function mapState(state) {\n  return {\n    user: state.user\n  };\n})(Index));","map":null,"metadata":{},"sourceType":"module"}