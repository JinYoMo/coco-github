{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport React from \"react\";\nimport { cloneElement } from 'react';\nvar style = {\n  width: '100%',\n  maxWidth: 1200,\n  marginLeft: 'auto',\n  marginRight: 'auto',\n  paddingLeft: 20,\n  paddingRight: 20\n}; //cloneElement将renderer进行拷贝，然后增加了一些props，以此来扩展想要渲染的renderer节点\n\nexport default (function (_ref) {\n  var children = _ref.children,\n      _ref$renderer = _ref.renderer,\n      renderer = _ref$renderer === void 0 ? /*#__PURE__*/React.createElement(\"div\", null) : _ref$renderer;\n  var newElement = cloneElement(renderer, {\n    style: _Object$assign({}, renderer.props.style, style),\n    //避免style重名被覆盖\n    children: children\n  });\n  return newElement;\n}); // export default ({ children, comp: Comp = \"div\" }) => {\n//   return <Comp style={style}>{children}</Comp>\n// }","map":{"version":3,"sources":["E:/个人项目/gitHub项目/coco-github/components/Container.jsx"],"names":["cloneElement","style","width","maxWidth","marginLeft","marginRight","paddingLeft","paddingRight","children","renderer","newElement","props"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,OAA7B;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,MADK;AAEZC,EAAAA,QAAQ,EAAE,IAFE;AAGZC,EAAAA,UAAU,EAAE,MAHA;AAIZC,EAAAA,WAAW,EAAE,MAJD;AAKZC,EAAAA,WAAW,EAAE,EALD;AAMZC,EAAAA,YAAY,EAAE;AANF,CAAd,C,CASA;;AACA,gBAAe,gBAAsC;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;AAAA,2BAAzBC,QAAyB;AAAA,MAAzBA,QAAyB,2CAAd,gCAAc;AACnD,MAAMC,UAAU,GAAGV,YAAY,CAACS,QAAD,EAAW;AACxCR,IAAAA,KAAK,EAAE,eAAc,EAAd,EAAkBQ,QAAQ,CAACE,KAAT,CAAeV,KAAjC,EAAwCA,KAAxC,CADiC;AACgB;AACxDO,IAAAA,QAAQ,EAARA;AAFwC,GAAX,CAA/B;AAIA,SAAOE,UAAP;AACD,CAND,E,CAOA;AACA;AACA","sourcesContent":["import { cloneElement } from 'react'\r\n\r\nconst style = {\r\n  width: '100%',\r\n  maxWidth: 1200,\r\n  marginLeft: 'auto',\r\n  marginRight: 'auto',\r\n  paddingLeft: 20,\r\n  paddingRight: 20\r\n}\r\n\r\n//cloneElement将renderer进行拷贝，然后增加了一些props，以此来扩展想要渲染的renderer节点\r\nexport default ({ children, renderer = <div /> }) => {\r\n  const newElement = cloneElement(renderer, {\r\n    style: Object.assign({}, renderer.props.style, style),  //避免style重名被覆盖\r\n    children\r\n  })\r\n  return newElement\r\n}\r\n// export default ({ children, comp: Comp = \"div\" }) => {\r\n//   return <Comp style={style}>{children}</Comp>\r\n// }"]},"metadata":{},"sourceType":"module"}