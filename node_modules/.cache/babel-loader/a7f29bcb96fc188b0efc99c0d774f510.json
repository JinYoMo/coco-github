{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport { divide } from 'lodash';\n\nvar api = require('../lib/api');\n\nfunction Index(_ref) {\n  var userRepos = _ref.userRepos,\n      userStaredRepos = _ref.userStaredRepos,\n      isLogin = _ref.isLogin;\n\n  if (!isLogin) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"root\"\n    }, /*#__PURE__*/React.createElement(\"p\", null, \"\\u4EB2\\uFF0C\\u60A8\\u8FD8\\u6CA1\\u6709\\u767B\\u5F55\\u54E6~\"));\n  }\n\n  console.log(userRepos, userStaredRepos, isLogin);\n  return /*#__PURE__*/React.createElement(\"span\", null, \"Index\");\n} //服务端和客户端都会执行\n\n/**\r\n * 客户端切换与访问Index页面服务端渲染都会执行getInitialProps\r\n * 在服务端渲染的时候，运行环境是处于nodejs环境，而不是处于浏览器的环境\r\n * 在nodejs环境中axios.get('/github/search/repositories?q=react')方式请求，会请求'http://localhost:80/github/search/repositories?q=react'地址，这个地址明显请求不成功\r\n * 解决的方式是请求api时判断是否为服务端，提取出公共的lib/api.js\r\n * 客户端的请求会到server/api.js中做处理，返回给客户端\r\n * 以上就是同构的概念——就是有部分代码都可能会在客户端和服务端执行，因此这段代码就要适应浏览器的执行环境，也要适应nodejs的执行环境，因此做区分处理，最终汇集到一个点requestGithub上面，保证在客户端和服务端都可正常执行\r\n */\n\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var ctx, reduxStore, user, userRepos, userStaredRepos;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref2.ctx, reduxStore = _ref2.reduxStore;\n            //  const result=await axios\n            //  .get('/github/search/repositories?q=react')\n            //  .then(resp=>console.log(resp))\n            user = reduxStore.getState().user; //拿到用户信息\n\n            if (!(!user || !user.id)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              isLogin: false\n            });\n\n          case 4:\n            _context.next = 6;\n            return api.request({\n              url: '/user/repos'\n            }, ctx.req, ctx.res);\n\n          case 6:\n            userRepos = _context.sent;\n            _context.next = 9;\n            return api.request({\n              url: '/user/starred'\n            }, ctx.req, ctx.res);\n\n          case 9:\n            userStaredRepos = _context.sent;\n            return _context.abrupt(\"return\", {\n              isLogin: true,\n              userRepos: userRepos.data,\n              userStaredRepos: userStaredRepos.data\n            });\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default Index;","map":{"version":3,"sources":["E:/个人项目/gitHub项目/coco-github/pages/index.js"],"names":["divide","api","require","Index","userRepos","userStaredRepos","isLogin","console","log","getInitialProps","ctx","reduxStore","user","getState","id","request","url","req","res","data"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;;AAGA,IAAMC,GAAG,GAACC,OAAO,CAAC,YAAD,CAAjB;;AACC,SAASC,KAAT,OAAmD;AAAA,MAAnCC,SAAmC,QAAnCA,SAAmC;AAAA,MAAzBC,eAAyB,QAAzBA,eAAyB;AAAA,MAATC,OAAS,QAATA,OAAS;;AACjD,MAAG,CAACA,OAAJ,EAAY;AACV,wBAAO;AAAK,MAAA,SAAS,EAAC;AAAf,oBACL,yFADK,CAAP;AAGD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ,EAAsBC,eAAtB,EAAsCC,OAAtC;AACC,sBAAO,0CAAP;AACF,C,CACD;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCH,KAAK,CAACM,eAAN;AAAA,uEAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,YAAAA,GAAR,SAAQA,GAAR,EAAYC,UAAZ,SAAYA,UAAZ;AACrB;AACA;AACA;AACMC,YAAAA,IAJe,GAIVD,UAAU,CAACE,QAAX,GAAsBD,IAJZ,EAIkB;;AAJlB,kBAKlB,CAACA,IAAD,IAAO,CAACA,IAAI,CAACE,EALK;AAAA;AAAA;AAAA;;AAAA,6CAMZ;AACLR,cAAAA,OAAO,EAAC;AADH,aANY;;AAAA;AAAA;AAAA,mBAYEL,GAAG,CAACc,OAAJ,CACrB;AACEC,cAAAA,GAAG,EAAE;AADP,aADqB,EAIrBN,GAAG,CAACO,GAJiB,EAKrBP,GAAG,CAACQ,GALiB,CAZF;;AAAA;AAYfd,YAAAA,SAZe;AAAA;AAAA,mBAoBQH,GAAG,CAACc,OAAJ,CAC3B;AACEC,cAAAA,GAAG,EAAE;AADP,aAD2B,EAI3BN,GAAG,CAACO,GAJuB,EAK3BP,GAAG,CAACQ,GALuB,CApBR;;AAAA;AAoBfb,YAAAA,eApBe;AAAA,6CA2Bb;AACLC,cAAAA,OAAO,EAAC,IADH;AAELF,cAAAA,SAAS,EAACA,SAAS,CAACe,IAFf;AAGLd,cAAAA,eAAe,EAACA,eAAe,CAACc;AAH3B,aA3Ba;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;AAiCD,eAAehB,KAAf","sourcesContent":["import { divide } from 'lodash'\r\n\r\nimport {Button} from 'antd' \r\nconst api=require('../lib/api')\r\n function Index({userRepos,userStaredRepos,isLogin}){\r\n   if(!isLogin){\r\n     return <div className=\"root\">\r\n       <p>亲，您还没有登录哦~</p>\r\n     </div>\r\n   }\r\n   console.log(userRepos,userStaredRepos,isLogin)\r\n    return <span>Index</span>\r\n }\r\n //服务端和客户端都会执行\r\n /**\r\n  * 客户端切换与访问Index页面服务端渲染都会执行getInitialProps\r\n  * 在服务端渲染的时候，运行环境是处于nodejs环境，而不是处于浏览器的环境\r\n  * 在nodejs环境中axios.get('/github/search/repositories?q=react')方式请求，会请求'http://localhost:80/github/search/repositories?q=react'地址，这个地址明显请求不成功\r\n  * 解决的方式是请求api时判断是否为服务端，提取出公共的lib/api.js\r\n  * 客户端的请求会到server/api.js中做处理，返回给客户端\r\n  * 以上就是同构的概念——就是有部分代码都可能会在客户端和服务端执行，因此这段代码就要适应浏览器的执行环境，也要适应nodejs的执行环境，因此做区分处理，最终汇集到一个点requestGithub上面，保证在客户端和服务端都可正常执行\r\n  */\r\n Index.getInitialProps=async ({ctx,reduxStore})=>{\r\n  //  const result=await axios\r\n  //  .get('/github/search/repositories?q=react')\r\n  //  .then(resp=>console.log(resp))\r\n  const user=reduxStore.getState().user; //拿到用户信息\r\n  if(!user||!user.id){\r\n    return {\r\n      isLogin:false\r\n    }\r\n  }\r\n  //ctx.req,ctx.res只有在服务端渲染时才会有\r\n  //调用当前用户的仓库列表\r\n  const userRepos= await api.request(\r\n    {\r\n      url: '/user/repos',\r\n    },\r\n    ctx.req,\r\n    ctx.res,\r\n  )\r\n  //调用关注的仓库列表\r\n  const userStaredRepos= await api.request(\r\n    {\r\n      url: '/user/starred',\r\n    },\r\n    ctx.req,\r\n    ctx.res,\r\n  )\r\n   return {\r\n     isLogin:true,\r\n     userRepos:userRepos.data,\r\n     userStaredRepos:userStaredRepos.data\r\n   }\r\n }\r\nexport default Index"]},"metadata":{},"sourceType":"module"}