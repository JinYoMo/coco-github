{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport axios from 'axios';\nimport { request } from '../lib/api';\n\nvar api = require('../lib/api');\n\nfunction Index() {\n  return /*#__PURE__*/React.createElement(\"span\", null, \"Index\");\n} //服务端和客户端都会执行\n\n/**\r\n * 客户端切换与访问Index页面服务端渲染都会执行getInitialProps\r\n * 在服务端渲染的时候，运行环境是处于nodejs环境，而不是处于浏览器的环境\r\n * 在nodejs环境中axios.get('/github/search/repositories?q=react')方式请求，会请求'http://localhost:80/github/search/repositories?q=react'地址，这个地址明显请求不成功\r\n * 解决的方式是请求api时判断是否为服务端，提取出公共的lib/api.js\r\n * 客户端的请求会到server/api.js中做处理，返回给客户端\r\n * 以上就是同构的概念——就是有部分代码都可能会在客户端和服务端执行，因此这段代码就要适应浏览器的执行环境，也要适应nodejs的执行环境，因此做区分处理，最终汇集到一个点requestGithub上面，保证在客户端和服务端都可正常执行\r\n */\n\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var ctx, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctx = _ref.ctx;\n            _context.next = 3;\n            return request({\n              url: '/search/repositories?q=react'\n            }, ctx.req, ctx.res);\n\n          case 3:\n            result = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: result.data\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Index;","map":{"version":3,"sources":["E:/个人项目/gitHub项目/coco-github/pages/index.js"],"names":["axios","request","api","require","Index","getInitialProps","ctx","url","req","res","result","data"],"mappings":";;;AAAC,OAAOA,KAAP,MAAkB,OAAlB;AACD,SAASC,OAAT,QAAwB,YAAxB;;AACC,IAAMC,GAAG,GAACC,OAAO,CAAC,YAAD,CAAjB;;AACA,SAASC,KAAT,GAAgB;AACb,sBAAO,0CAAP;AACF,C,CACD;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCA,KAAK,CAACC,eAAN;AAAA,uEAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,YAAAA,GAAR,QAAQA,GAAR;AAAA;AAAA,mBAMDL,OAAO,CAAC;AAC1BM,cAAAA,GAAG,EAAC;AADsB,aAAD,EAEzBD,GAAG,CAACE,GAFqB,EAEjBF,GAAG,CAACG,GAFa,CANN;;AAAA;AAMfC,YAAAA,MANe;AAAA,6CASb;AACLC,cAAAA,IAAI,EAACD,MAAM,CAACC;AADP,aATa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;AAaD,eAAeP,KAAf","sourcesContent":[" import axios from 'axios'\r\nimport { request } from '../lib/api'\r\n const api=require('../lib/api')\r\n function Index(){\r\n    return <span>Index</span>\r\n }\r\n //服务端和客户端都会执行\r\n /**\r\n  * 客户端切换与访问Index页面服务端渲染都会执行getInitialProps\r\n  * 在服务端渲染的时候，运行环境是处于nodejs环境，而不是处于浏览器的环境\r\n  * 在nodejs环境中axios.get('/github/search/repositories?q=react')方式请求，会请求'http://localhost:80/github/search/repositories?q=react'地址，这个地址明显请求不成功\r\n  * 解决的方式是请求api时判断是否为服务端，提取出公共的lib/api.js\r\n  * 客户端的请求会到server/api.js中做处理，返回给客户端\r\n  * 以上就是同构的概念——就是有部分代码都可能会在客户端和服务端执行，因此这段代码就要适应浏览器的执行环境，也要适应nodejs的执行环境，因此做区分处理，最终汇集到一个点requestGithub上面，保证在客户端和服务端都可正常执行\r\n  */\r\n Index.getInitialProps=async ({ctx})=>{\r\n  //  const result=await axios\r\n  //  .get('/github/search/repositories?q=react')\r\n  //  .then(resp=>console.log(resp))\r\n\r\n  //ctx.req,ctx.res只有在服务端渲染时才会有\r\n  const result= await request({\r\n    url:'/search/repositories?q=react'\r\n  },ctx.req,ctx.res)\r\n   return {\r\n     data:result.data\r\n   }\r\n }\r\nexport default Index"]},"metadata":{},"sourceType":"module"}