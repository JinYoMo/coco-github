{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//创建store\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nvar initialState = {\n  count: 0\n};\nvar userInitialState = {\n  username: 'Jokcy'\n};\nvar ADD = 'ADD';\n\nfunction counterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log(state, action);\n\n  switch (action.type) {\n    case 'ADD':\n      return {\n        count: state.count + (action.num || 1)\n      };\n    //返回新对象 不能使用state.count+=1 return state 这种方式未改变state的地址，从而未对比值更新，即更新了状态，页面未渲染\n\n    default:\n      return state;\n  }\n}\n\nvar UPDATE_USERNAME = 'UPDATE_USERNAME';\n\nfunction userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : userInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_USERNAME:\n      return _objectSpread({}, state, {\n        username: action.name\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar allReducers = combineReducers({\n  counter: counterReducer,\n  user: userReducer\n}); //action creator\n\nfunction add(num) {\n  return {\n    type: 'ADD',\n    num: num\n  };\n} //用于异步添加\n\n\nfunction addAsync(num) {\n  return function (dispatch) {\n    setTimeout(function () {\n      dispatch(add(num));\n    }, 3000);\n  };\n} // console.log(store.getState())  //获取到state\n// store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\n\n\nstore.dispatch(add(3));\nstore.dispatch(addAsync(3)); // console.log(store.getState())  //获取新的state\n//subscribe该方法每次数据变更均会调用(后面)\n\nstore.subscribe(function () {\n  console.log('change', store.getState());\n});\nstore.dispatch({\n  type: 'ADD'\n}); //再次执行reducer，将action传入 从而更新state\n\nstore.dispatch({\n  type: UPDATE_USERNAME,\n  name: 'Lilei'\n});\nexport default function initializeStore() {\n  var store = createStore(allReducers, {\n    counter: initialState,\n    user: userInitialState\n  }, composeWithDevTools(applyMiddleware(ReduxThunk)) //applyMiddleware用于异步的中间件\n  );\n  return store; //确保每次生成的store都是新的\n}","map":{"version":3,"sources":["E:/个人项目/gitHub项目/coco-github/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","initialState","count","userInitialState","username","ADD","counterReducer","state","action","console","log","type","num","UPDATE_USERNAME","userReducer","name","allReducers","counter","user","add","addAsync","dispatch","setTimeout","store","subscribe","getState","initializeStore"],"mappings":";AAAA;AACA,SAAQA,WAAR,EAAoBC,eAApB,EAAoCC,eAApC,QAA0D,OAA1D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,IAAMC,YAAY,GAAC;AACjBC,EAAAA,KAAK,EAAC;AADW,CAAnB;AAGA,IAAMC,gBAAgB,GAAC;AACrBC,EAAAA,QAAQ,EAAC;AADY,CAAvB;AAGA,IAAMC,GAAG,GAAC,KAAV;;AACA,SAASC,cAAT,GAAkD;AAAA,MAA1BC,KAA0B,uEAApBN,YAAoB;AAAA,MAAPO,MAAO;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAkBC,MAAlB;;AACA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAK,KAAL;AACE,aAAO;AAACT,QAAAA,KAAK,EAACK,KAAK,CAACL,KAAN,IAAaM,MAAM,CAACI,GAAP,IAAY,CAAzB;AAAP,OAAP;AAA6C;;AAC/C;AACE,aAAOL,KAAP;AAJJ;AAMD;;AACD,IAAMM,eAAe,GAAC,iBAAtB;;AACA,SAASC,WAAT,GAAmD;AAAA,MAA9BP,KAA8B,uEAAxBJ,gBAAwB;AAAA,MAAPK,MAAO;;AACjD,UAAQA,MAAM,CAACG,IAAf;AACE,SAAKE,eAAL;AACE,+BACKN,KADL;AAEEH,QAAAA,QAAQ,EAACI,MAAM,CAACO;AAFlB;;AAIF;AACE,aAAOR,KAAP;AAPJ;AASD;;AACD,IAAMS,WAAW,GAACnB,eAAe,CAAC;AAChCoB,EAAAA,OAAO,EAACX,cADwB;AAEhCY,EAAAA,IAAI,EAACJ;AAF2B,CAAD,CAAjC,C,CAKA;;AACA,SAASK,GAAT,CAAaP,GAAb,EAAiB;AACf,SAAO;AACLD,IAAAA,IAAI,EAAC,KADA;AAELC,IAAAA,GAAG,EAAHA;AAFK,GAAP;AAID,C,CACD;;;AACA,SAASQ,QAAT,CAAkBR,GAAlB,EAAsB;AACpB,SAAO,UAAAS,QAAQ,EAAE;AACfC,IAAAA,UAAU,CAAC,YAAI;AACbD,MAAAA,QAAQ,CAACF,GAAG,CAACP,GAAD,CAAJ,CAAR;AACD,KAFS,EAER,IAFQ,CAAV;AAGD,GAJD;AAKD,C,CACD;AACA;;;AACAW,KAAK,CAACF,QAAN,CAAeF,GAAG,CAAC,CAAD,CAAlB;AACAI,KAAK,CAACF,QAAN,CAAeD,QAAQ,CAAC,CAAD,CAAvB,E,CACA;AACA;;AACAG,KAAK,CAACC,SAAN,CAAgB,YAAI;AAClBf,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBa,KAAK,CAACE,QAAN,EAArB;AACD,CAFD;AAGAF,KAAK,CAACF,QAAN,CAAe;AAACV,EAAAA,IAAI,EAAC;AAAN,CAAf,E,CAA8B;;AAC9BY,KAAK,CAACF,QAAN,CAAe;AAACV,EAAAA,IAAI,EAACE,eAAN;AAAsBE,EAAAA,IAAI,EAAC;AAA3B,CAAf;AAEA,eAAe,SAASW,eAAT,GAA0B;AACvC,MAAMH,KAAK,GAAC3B,WAAW,CACrBoB,WADqB,EAErB;AACEC,IAAAA,OAAO,EAAChB,YADV;AAEEiB,IAAAA,IAAI,EAACf;AAFP,GAFqB,EAMrBH,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CANE,CAM6B;AAN7B,GAAvB;AAQA,SAAOwB,KAAP,CATuC,CASxB;AAChB","sourcesContent":["//创建store\r\nimport {createStore,combineReducers,applyMiddleware} from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nconst initialState={\r\n  count:0,\r\n}\r\nconst userInitialState={\r\n  username:'Jokcy'\r\n}\r\nconst ADD='ADD';\r\nfunction counterReducer(state=initialState,action){\r\n  console.log(state,action)\r\n  switch (action.type) {\r\n    case 'ADD':\r\n      return {count:state.count+(action.num||1)};  //返回新对象 不能使用state.count+=1 return state 这种方式未改变state的地址，从而未对比值更新，即更新了状态，页面未渲染\r\n    default:\r\n      return state\r\n  }\r\n}\r\nconst UPDATE_USERNAME='UPDATE_USERNAME';\r\nfunction userReducer(state=userInitialState,action){\r\n  switch (action.type){\r\n    case UPDATE_USERNAME:\r\n      return{\r\n        ...state,\r\n        username:action.name,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\nconst allReducers=combineReducers({\r\n  counter:counterReducer,\r\n  user:userReducer\r\n})\r\n\r\n//action creator\r\nfunction add(num){\r\n  return {\r\n    type:'ADD',\r\n    num,\r\n  }\r\n}\r\n//用于异步添加\r\nfunction addAsync(num){\r\n  return dispatch=>{\r\n    setTimeout(()=>{\r\n      dispatch(add(num));\r\n    },3000)\r\n  }\r\n}\r\n// console.log(store.getState())  //获取到state\r\n// store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\r\nstore.dispatch(add(3))\r\nstore.dispatch(addAsync(3))\r\n// console.log(store.getState())  //获取新的state\r\n//subscribe该方法每次数据变更均会调用(后面)\r\nstore.subscribe(()=>{\r\n  console.log('change',store.getState());\r\n})\r\nstore.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\r\nstore.dispatch({type:UPDATE_USERNAME,name:'Lilei'})\r\n\r\nexport default function initializeStore(){\r\n  const store=createStore(\r\n    allReducers,\r\n    {\r\n      counter:initialState,\r\n      user:userInitialState\r\n    },\r\n    composeWithDevTools(applyMiddleware(ReduxThunk))  //applyMiddleware用于异步的中间件\r\n  )\r\n  return store;  //确保每次生成的store都是新的\r\n}"]},"metadata":{},"sourceType":"module"}