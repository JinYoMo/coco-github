{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport dynamid from 'next/dynamic';\nimport withRepoBasic from '../../components/with-repo-basic';\nimport api from '../../lib/api';\nvar MDRenderer = dynamid(function () {\n  return import('../../components/MarkdownRenderer');\n}, {\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../../components/MarkdownRenderer')];\n    },\n    modules: ['../../components/MarkdownRenderer']\n  }\n});\n\nfunction Detail(_ref) {\n  var readme = _ref.readme;\n  return /*#__PURE__*/React.createElement(MDRenderer, {\n    content: readme.content,\n    isBase64: true\n  });\n} //调用获取readme接口\n\n\nDetail.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var _ref2$ctx, _ref2$ctx$query, owner, name, req, res, readmeResp;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref2$ctx = _ref2.ctx, _ref2$ctx$query = _ref2$ctx.query, owner = _ref2$ctx$query.owner, name = _ref2$ctx$query.name, req = _ref2$ctx.req, res = _ref2$ctx.res;\n            _context.next = 3;\n            return api.request({\n              url: \"/repos/\".concat(owner, \"/\").concat(name, \"/readme\")\n            }, req, res);\n\n          case 3:\n            readmeResp = _context.sent;\n            return _context.abrupt(\"return\", {\n              readme: readmeResp.data\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default withRepoBasic(Detail, 'index');","map":null,"metadata":{},"sourceType":"module"}