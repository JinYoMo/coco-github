{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n//创建store\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport axios from 'axios';\nvar userInitialState = {};\nvar LOGOUT = 'LOGOUT';\n\nfunction userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : userInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOGOUT:\n      {\n        return {};\n      }\n\n    default:\n      return state;\n  }\n}\n/**\r\n * {\r\n *   user{}\r\n * }\r\n */\n\n\nvar allReducers = combineReducers({\n  user: userReducer\n}); //action creators\n\nexport function logout() {\n  return function (dispatch) {\n    axios.post('/logout').then(function (resp) {\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n      } else {\n        console.log('Logout failed', resp);\n      }\n    }).catch(function (err) {\n      console.log('Logout failed', err);\n    });\n  };\n} // // console.log(store.getState())  //获取到state\n// // store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\n// store.dispatch(add(3))\n// store.dispatch(addAsync(3))\n// // console.log(store.getState())  //获取新的state\n// //subscribe该方法每次数据变更均会调用(后面)\n// store.subscribe(()=>{\n//   console.log('change',store.getState());\n// })\n// store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\n// store.dispatch({type:UPDATE_USERNAME,name:'Lilei'})\n\nexport default function initializeStore(state) {\n  var store = createStore(allReducers, _Object$assign({}, {\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)) //applyMiddleware用于异步的中间件\n  );\n  return store; //确保每次生成的store都是新的\n}","map":{"version":3,"sources":["E:/个人项目/gitHub项目/coco-github/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","axios","userInitialState","LOGOUT","userReducer","state","action","type","allReducers","user","logout","dispatch","post","then","resp","status","console","log","catch","err","initializeStore","store"],"mappings":";AAAA;AACA,SAAQA,WAAR,EAAoBC,eAApB,EAAoCC,eAApC,QAA0D,OAA1D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,gBAAgB,GAAC,EAAvB;AACA,IAAMC,MAAM,GAAC,QAAb;;AAEA,SAASC,WAAT,GAAmD;AAAA,MAA9BC,KAA8B,uEAAxBH,gBAAwB;AAAA,MAAPI,MAAO;;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,MAAL;AAAY;AACV,eAAO,EAAP;AAED;;AACD;AACE,aAAOE,KAAP;AANJ;AAQD;AACD;AACA;AACA;AACA;AACA;;;AACA,IAAMG,WAAW,GAACX,eAAe,CAAC;AAChCY,EAAAA,IAAI,EAACL;AAD2B,CAAD,CAAjC,C,CAGA;;AACA,OAAO,SAASM,MAAT,GAAiB;AACtB,SAAO,UAAAC,QAAQ,EAAG;AAChBV,IAAAA,KAAK,CAACW,IAAN,CAAW,SAAX,EACCC,IADD,CACM,UAAAC,IAAI,EAAE;AACV,UAAGA,IAAI,CAACC,MAAL,KAAc,GAAjB,EAAqB;AACnBJ,QAAAA,QAAQ,CAAC;AAACJ,UAAAA,IAAI,EAACJ;AAAN,SAAD,CAAR;AACD,OAFD,MAEK;AACHa,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BH,IAA5B;AACD;AACF,KAPD,EAOGI,KAPH,CAOS,UAAAC,GAAG,EAAE;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BE,GAA5B;AACD,KATD;AAUD,GAXD;AAYD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,eAAT,CAAyBf,KAAzB,EAA+B;AAC5C,MAAMgB,KAAK,GAACzB,WAAW,CACrBY,WADqB,EAErB,eAAc,EAAd,EAAkB;AAChBC,IAAAA,IAAI,EAACP;AADW,GAAlB,EAEEG,KAFF,CAFqB,EAKrBL,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CALE,CAK6B;AAL7B,GAAvB;AAOA,SAAOsB,KAAP,CAR4C,CAQ7B;AAChB","sourcesContent":["//创建store\r\nimport {createStore,combineReducers,applyMiddleware} from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n\r\nimport axios from 'axios'\r\n\r\nconst userInitialState={}\r\nconst LOGOUT='LOGOUT'\r\n\r\nfunction userReducer(state=userInitialState,action){\r\n  switch (action.type){\r\n    case LOGOUT:{\r\n      return {\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n/**\r\n * {\r\n *   user{}\r\n * }\r\n */\r\nconst allReducers=combineReducers({\r\n  user:userReducer\r\n})\r\n//action creators\r\nexport function logout(){\r\n  return dispatch =>{\r\n    axios.post('/logout')\r\n    .then(resp=>{\r\n      if(resp.status===200){\r\n        dispatch({type:LOGOUT})\r\n      }else{\r\n        console.log('Logout failed',resp)\r\n      }\r\n    }).catch(err=>{\r\n      console.log('Logout failed',err)\r\n    })\r\n  }\r\n}\r\n\r\n// // console.log(store.getState())  //获取到state\r\n// // store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\r\n// store.dispatch(add(3))\r\n// store.dispatch(addAsync(3))\r\n// // console.log(store.getState())  //获取新的state\r\n// //subscribe该方法每次数据变更均会调用(后面)\r\n// store.subscribe(()=>{\r\n//   console.log('change',store.getState());\r\n// })\r\n// store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\r\n// store.dispatch({type:UPDATE_USERNAME,name:'Lilei'})\r\n\r\nexport default function initializeStore(state){\r\n  const store=createStore(\r\n    allReducers,\r\n    Object.assign({}, {\r\n      user:userInitialState\r\n    },state),\r\n    composeWithDevTools(applyMiddleware(ReduxThunk))  //applyMiddleware用于异步的中间件\r\n  )\r\n  return store;  //确保每次生成的store都是新的\r\n}"]},"metadata":{},"sourceType":"module"}