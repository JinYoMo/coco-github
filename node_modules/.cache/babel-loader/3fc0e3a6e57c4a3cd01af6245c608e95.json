{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs2/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\"));\n\nvar axios = require('axios');\n\nvar isServer = typeof window === 'undefined';\nvar github_base_url = \"http://api.github.com\";\n\nfunction requestGithub(_x, _x2, _x3, _x4) {\n  return _requestGithub.apply(this, arguments);\n}\n\nfunction _requestGithub() {\n  _requestGithub = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(method, url, data, headers) {\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios({\n              method: method,\n              url: \"\".concat(github_base_url).concat(url),\n              data: data,\n              headers: headers\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _requestGithub.apply(this, arguments);\n}\n\nfunction request(_x5, _x6, _x7) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(_ref, req, res) {\n    var _ref$method, method, url, _ref$data, data, session, githubAuth, headers;\n\n    return _regenerator.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref$method = _ref.method, method = _ref$method === void 0 ? 'GET' : _ref$method, url = _ref.url, _ref$data = _ref.data, data = _ref$data === void 0 ? {} : _ref$data;\n\n            if (url) {\n              _context2.next = 3;\n              break;\n            }\n\n            throw Error('url must provide');\n\n          case 3:\n            if (!isServer) {\n              _context2.next = 13;\n              break;\n            }\n\n            session = req.session;\n            githubAuth = session.githubAuth || {};\n            headers = {};\n\n            if (githubAuth.access_token) {\n              headers['Authorization'] = \"\".concat(githubAuth.token_type, \" \").concat(githubAuth.access_token);\n            }\n\n            _context2.next = 10;\n            return requestGithub(method, url, data, headers);\n\n          case 10:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 13:\n            _context2.next = 15;\n            return axios({\n              method: method,\n              url: \"/github\".concat(url),\n              data: data\n            });\n\n          case 15:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _request.apply(this, arguments);\n}\n\nmodule.exports = {\n  request: request,\n  requestGithub: requestGithub\n};","map":{"version":3,"sources":["E:/个人项目/gitHub项目/coco-github/lib/api.js"],"names":["axios","require","isServer","window","github_base_url","requestGithub","method","url","data","headers","request","req","res","Error","session","githubAuth","access_token","token_type","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,QAAQ,GAAC,OAAOC,MAAP,KAAgB,WAA/B;AAEA,IAAMC,eAAe,GAAC,uBAAtB;;SACeC,a;;;;;2FAAf,iBAA6BC,MAA7B,EAAoCC,GAApC,EAAwCC,IAAxC,EAA6CC,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACeT,KAAK,CAAC;AACjBM,cAAAA,MAAM,EAANA,MADiB;AAEjBC,cAAAA,GAAG,YAAIH,eAAJ,SAAsBG,GAAtB,CAFc;AAGjBC,cAAAA,IAAI,EAAJA,IAHiB;AAIjBC,cAAAA,OAAO,EAAPA;AAJiB,aAAD,CADpB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SASeC,O;;;;;qFAAf,wBAAkDC,GAAlD,EAAsDC,GAAtD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAwBN,MAAxB,EAAwBA,MAAxB,4BAA+B,KAA/B,gBAAqCC,GAArC,QAAqCA,GAArC,mBAAyCC,IAAzC,EAAyCA,IAAzC,0BAA8C,EAA9C;;AAAA,gBACQD,GADR;AAAA;AAAA;AAAA;;AAAA,kBAEYM,KAAK,CAAC,kBAAD,CAFjB;;AAAA;AAAA,iBAKOX,QALP;AAAA;AAAA;AAAA;;AAMYY,YAAAA,OANZ,GAMoBH,GAAG,CAACG,OANxB;AAOYC,YAAAA,UAPZ,GAOuBD,OAAO,CAACC,UAAR,IAAoB,EAP3C;AAQYN,YAAAA,OARZ,GAQoB,EARpB;;AASM,gBAAGM,UAAU,CAACC,YAAd,EAA2B;AACzBP,cAAAA,OAAO,CAAC,eAAD,CAAP,aAA4BM,UAAU,CAACE,UAAvC,cAAqDF,UAAU,CAACC,YAAhE;AACD;;AAXP;AAAA,mBAYmBX,aAAa,CAACC,MAAD,EAAQC,GAAR,EAAYC,IAAZ,EAAiBC,OAAjB,CAZhC;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAemBT,KAAK,CAAC;AACjBM,cAAAA,MAAM,EAANA,MADiB;AAEjBC,cAAAA,GAAG,mBAAYA,GAAZ,CAFc;AAGjBC,cAAAA,IAAI,EAAJA;AAHiB,aAAD,CAfxB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuBAU,MAAM,CAACC,OAAP,GAAe;AACbT,EAAAA,OAAO,EAAPA,OADa;AAEbL,EAAAA,aAAa,EAAbA;AAFa,CAAf","sourcesContent":["const axios = require('axios')\r\n\r\nconst isServer=typeof window==='undefined';\r\n\r\nconst github_base_url=\"http://api.github.com\"\r\nasync function requestGithub(method,url,data,headers){\r\n  return await axios({\r\n    method,\r\n    url:`${github_base_url}${url}`,\r\n    data,\r\n    headers\r\n  })\r\n}\r\n\r\nasync function request({method='GET',url,data={}},req,res){\r\n    if(!url){\r\n      throw Error('url must provide')\r\n    }\r\n    //服务端渲染 接口url补全当前域名处理  axios.get('/github/search/repositories?q=react')\r\n    if(isServer){\r\n      const session=req.session;\r\n      const githubAuth=session.githubAuth||{}\r\n      const headers={}\r\n      if(githubAuth.access_token){\r\n        headers['Authorization']=`${githubAuth.token_type} ${githubAuth.access_token}`\r\n      }\r\n      return await requestGithub(method,url,data,headers)\r\n    }else{\r\n      //客户端渲染 默认补全当前域名\r\n      return await axios({\r\n        method,\r\n        url: `/github${url}`,\r\n        data,\r\n      })\r\n    }\r\n}\r\n\r\nmodule.exports={\r\n  request,\r\n  requestGithub\r\n}"]},"metadata":{},"sourceType":"script"}