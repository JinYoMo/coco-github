{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n//创建store\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport axios from 'axios';\nvar userInitialState = {};\nvar LOGOUT = 'LOGOUT';\n\nfunction userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : userInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOGOUT:\n      {\n        return {}; //将user清空\n      }\n\n    default:\n      return state;\n  }\n}\n/**\r\n * {\r\n *   user:{}\r\n * }\r\n */\n\n\nvar allReducers = combineReducers({\n  user: userReducer\n}); //action creators\n\nexport function logout() {\n  return function (dispatch) {\n    axios.post('/logout').then(function (resp) {\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n      } else {\n        console.log('Logout failed', resp);\n      }\n    }).catch(function (err) {\n      console.log('Logout failed', err);\n    });\n  };\n} // // console.log(store.getState())  //获取到state\n// // store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\n// store.dispatch(add(3))\n// store.dispatch(addAsync(3))\n// // console.log(store.getState())  //获取新的state\n// //subscribe该方法每次数据变更均会调用(后面)\n// store.subscribe(()=>{\n//   console.log('change',store.getState());\n// })\n// store.dispatch({type:'ADD'})  //再次执行reducer，将action传入 从而更新state\n// store.dispatch({type:UPDATE_USERNAME,name:'Lilei'})\n\nexport default function initializeStore(state) {\n  var store = createStore(allReducers, _Object$assign({}, {\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)) //applyMiddleware用于异步的中间件\n  );\n  return store; //确保每次生成的store都是新的\n}","map":null,"metadata":{},"sourceType":"module"}