{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nimport dynamid from 'next/dynamic';\nimport withRepoBasic from '../../components/with-repo-basic';\nimport api from '../../lib/api';\nvar MDRenderer = dynamid(function () {\n  return import('../../components/MarkdownRenderer');\n}, {\n  loading: function loading() {\n    return /*#__PURE__*/React.createElement(\"p\", null, \"Loading\");\n  },\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../../components/MarkdownRenderer')];\n    },\n    modules: ['../../components/MarkdownRenderer']\n  }\n});\n\nfunction Detail(_ref) {\n  var readme = _ref.readme;\n  return /*#__PURE__*/React.createElement(MDRenderer, {\n    content: readme.content,\n    isBase64: true\n  });\n} //调用获取readme接口\n\n\nDetail.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var _ref2$ctx, _ref2$ctx$query, owner, name, req, res, readmeResp;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref2$ctx = _ref2.ctx, _ref2$ctx$query = _ref2$ctx.query, owner = _ref2$ctx$query.owner, name = _ref2$ctx$query.name, req = _ref2$ctx.req, res = _ref2$ctx.res;\n            _context.next = 3;\n            return api.request({\n              url: \"/repos/\".concat(owner, \"/\").concat(name, \"/readme\")\n            }, req, res);\n\n          case 3:\n            readmeResp = _context.sent;\n            return _context.abrupt(\"return\", {\n              readme: readmeResp.data\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default withRepoBasic(Detail, 'index');","map":{"version":3,"sources":["E:/个人项目/gitHub项目/coco-github/pages/detail/index.js"],"names":["dynamid","withRepoBasic","api","MDRenderer","loading","Detail","readme","content","getInitialProps","ctx","query","owner","name","req","res","request","url","readmeResp","data"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,GAAP,MAAgB,eAAhB;AAEA,IAAMC,UAAU,GAAGH,OAAO,CAAC;AAAA,SAAI,OAAO,mCAAP,CAAJ;AAAA,CAAD,EAAiD;AACzEI,EAAAA,OAAO,EAAC;AAAA,wBAAI,yCAAJ;AAAA,GADiE;AAAA;AAAA;AAAA,kCAArC,mCAAqC;AAAA;AAAA,cAArC,mCAAqC;AAAA;AAAA,CAAjD,CAA1B;;AAGA,SAASC,MAAT,OAA0B;AAAA,MAARC,MAAQ,QAARA,MAAQ;AACxB,sBAAO,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEA,MAAM,CAACC,OAA5B;AAAqC,IAAA,QAAQ,EAAE;AAA/C,IAAP;AACD,C,CAED;;;AACAF,MAAM,CAACG,eAAP;AAAA,uEAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAOC,GAAP,8BAAYC,KAAZ,EAAmBC,KAAnB,mBAAmBA,KAAnB,EAAyBC,IAAzB,mBAAyBA,IAAzB,EAA+BC,GAA/B,aAA+BA,GAA/B,EAAmCC,GAAnC,aAAmCA,GAAnC;AAAA;AAAA,mBACKZ,GAAG,CAACa,OAAJ,CAAY;AACnCC,cAAAA,GAAG,mBAAWL,KAAX,cAAoBC,IAApB;AADgC,aAAZ,EAEvBC,GAFuB,EAEnBC,GAFmB,CADL;;AAAA;AACdG,YAAAA,UADc;AAAA,6CAKb;AACLX,cAAAA,MAAM,EAACW,UAAU,CAACC;AADb,aALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAejB,aAAa,CAACI,MAAD,EAAQ,OAAR,CAA5B","sourcesContent":["import dynamid from 'next/dynamic'\r\nimport withRepoBasic from '../../components/with-repo-basic'\r\nimport api from '../../lib/api'\r\n\r\nconst MDRenderer = dynamid(()=>import('../../components/MarkdownRenderer'),{\r\n  loading:()=><p>Loading</p>\r\n})\r\nfunction Detail ({readme}){\r\n  return <MDRenderer content={readme.content} isBase64={true} />\r\n}\r\n\r\n//调用获取readme接口\r\nDetail.getInitialProps=async({ctx:{query:{owner,name},req,res}})=>{\r\n   const readmeResp = await api.request({\r\n     url:`/repos/${owner}/${name}/readme`\r\n   },req,res)\r\n\r\n   return {\r\n     readme:readmeResp.data\r\n   }\r\n}\r\n\r\nexport default withRepoBasic(Detail,'index')"]},"metadata":{},"sourceType":"module"}