{"ast":null,"code":"import _Reflect$construct from \"@babel/runtime-corejs2/core-js/reflect/construct\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(_Reflect$construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport createSore from '../store/store';\nvar isServer = typeof window === 'undefined'; //判断是否是服务端\n\nvar __NEXT_REUDX_STORE__ = '__NEXT_REUDX_STORE__'; //创建store并保存，使得在页面切换时仍是一个store基础上保存\n\nfunction getOrCreateStore(initialState) {\n  if (isServer) {\n    return createSore(initialState);\n  }\n\n  if (!window[__NEXT_REUDX_STORE__]) {\n    window[__NEXT_REUDX_STORE__] = createSore(initialState);\n  }\n\n  return window[__NEXT_REUDX_STORE__];\n}\n\nexport default (function (Comp) {\n  var WithReduxApp = /*#__PURE__*/function (_React$Component) {\n    _inherits(WithReduxApp, _React$Component);\n\n    var _super = _createSuper(WithReduxApp);\n\n    function WithReduxApp(props) {\n      var _this;\n\n      _classCallCheck(this, WithReduxApp);\n\n      _this = _super.call(this, props); //必须填写\n\n      _this.reduxStore = getOrCreateStore(props.initialReduxState);\n      return _this;\n    }\n\n    _createClass(WithReduxApp, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            Component = _this$props.Component,\n            pageProps = _this$props.pageProps,\n            rest = _objectWithoutProperties(_this$props, [\"Component\", \"pageProps\"]);\n\n        console.log(Component, pageProps);\n\n        if (pageProps) {\n          pageProps.test = '123';\n        }\n\n        return /*#__PURE__*/React.createElement(Comp, _extends({\n          Component: Component,\n          pageProps: pageProps\n        }, rest, {\n          reduxStore: this.reduxStore\n        }));\n      }\n    }]);\n\n    return WithReduxApp;\n  }(React.Component); //在服务端渲染的时候会被执行一次，客户端渲染也会被执行\n  //这个方法执行完成后会被销毁，下次执行时重新创建\n\n\n  WithReduxApp.getInitialProps = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n      var reduxStore, req, session, appProps;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //服务端\n              if (isServer) {\n                req = ctx.ctx.req;\n                session = req.session;\n\n                if (session && session.userInfo) {\n                  //作store的初始化\n                  reduxStore = getOrCreateStore({\n                    user: session.userInfo //一开始就会存在在服务端，不需要触发store中的action\n\n                  });\n                } else {\n                  reduxStore = getOrCreateStore();\n                }\n              } else {\n                reduxStore = getOrCreateStore();\n              }\n\n              ctx.reduxStore = reduxStore;\n              appProps = {};\n\n              if (!(typeof Comp.getInitialProps === 'function')) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return Comp.getInitialProps(ctx);\n\n            case 6:\n              appProps = _context.sent;\n\n            case 7:\n              return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                initialReduxState: reduxStore.getState()\n              }));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return WithReduxApp;\n});","map":null,"metadata":{},"sourceType":"module"}